package com.healthmate.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Map;

@Service
public class GeminiService {

    @Value("${gemini.api.key}")
    private String apiKey;

    private static final String GEMINI_API_URL =
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

    public String diagnose(String userInput) {
        if (!isValidInput(userInput)) {
            return """
                Please describe your symptoms in clear detail using natural language. For example:<br>
                "I have been experiencing a sore throat, fever, and body aches for the past 3 days."
                """;
        }

        String prompt = """
            You are an AI medical assistant, not a licensed doctor. You must clearly state that the diagnosis is based on user-input symptoms and should not be considered a substitute for professional medical advice. The user should be encouraged to consult a qualified healthcare provider for a proper diagnosis and treatment.

            The user has described their symptoms in natural language. Based on the symptoms, provide a **possible** diagnosis along with basic reasoning.

            Respond in the following format:

            1. **Possible Condition(s)**: [List of potential conditions — clearly marked as *possible*]
            2. **Explanation**: [Why you think these conditions might be the cause]
            3. **Recommended Next Steps**: [Encourage the user to consult a healthcare provider and/or take necessary action]
            4. **Disclaimer**: This diagnosis is generated by an AI system based on your input. It is not a substitute for professional medical advice, diagnosis, or treatment. Please consult a licensed doctor for a proper diagnosis.

            User-described symptoms:
            "%s"
        """.formatted(userInput);

        Map<String, Object> requestBody = Map.of(
                "contents", List.of(
                        Map.of("parts", List.of(
                                Map.of("text", prompt)
                        ))
                )
        );

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("X-goog-api-key", apiKey);

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
        RestTemplate restTemplate = new RestTemplate();

        ResponseEntity<Map<String, Object>> response = restTemplate.exchange(
                GEMINI_API_URL,
                HttpMethod.POST,
                entity,
                new org.springframework.core.ParameterizedTypeReference<>() {}
        );

        try {
            Map<String, Object> responseBody = response.getBody();
            if (responseBody == null) return fallbackMessage();

            @SuppressWarnings("unchecked")
            List<Map<String, Object>> candidates = (List<Map<String, Object>>) responseBody.get("candidates");
            if (candidates == null || candidates.isEmpty()) return fallbackMessage();

            @SuppressWarnings("unchecked")
            Map<String, Object> content = (Map<String, Object>) candidates.get(0).get("content");

            @SuppressWarnings("unchecked")
            List<Map<String, String>> parts = (List<Map<String, String>>) content.get("parts");

            String rawText = parts.get(0).get("text");
            return formatForHtml(rawText);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return fallbackMessage();
    }

    private String fallbackMessage() {
        return "Sorry, I couldn't generate a diagnosis at the moment. Please try again.";
    }

    private boolean isValidInput(String input) {
        if (input == null || input.trim().length() < 10) return false;
        if (!input.matches(".*[a-zA-Z].*")) return false;
        if (input.matches("(?i).*\\b(hello|hi|asdf|test|1234|how are you|okay|ok|fine|nothing|what)\\b")) return false;
        return true;
    }

    private String formatForHtml(String raw) {
        return raw
                .replaceAll("\\*\\*(.*?)\\*\\*", "<b>$1</b>")                      
                .replaceAll("\\*(Possible.*?)\\*", "<i>$1</i>")                  
                .replaceAll("(?m)^\\s*\\*\\s*", "• ")                              
                .replaceAll("\\n", "<br>");                                       
    }
}
